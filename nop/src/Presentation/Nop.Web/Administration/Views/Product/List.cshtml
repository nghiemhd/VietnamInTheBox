@model ProductListModel
@using Telerik.Web.Mvc.UI
@{
    var gridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSize;

    //page title
    ViewBag.Title = T("Admin.Catalog.Products.Manage").Text;
}
@using (Html.BeginForm())
{
    <div class="section-header">
        <div class="title">
            <img src="@Url.Content("~/Administration/Content/images/ico-catalog.png")" alt="" />
            @T("Admin.Catalog.Products.Manage")
        </div>
        @if (ViewBag.CanEditProduct)
        { 
        <div class="options">
            <a href="@Url.Action("Create")" class="t-button">@T("Admin.Common.AddNew")</a>
            <a href="@Url.Action("DownloadCatalogAsPdf")" class="t-button">@T("Admin.Catalog.Products.List.DownloadPDF")</a>
            <a href="@Url.Action("ExportXmlAll")" class="t-button">@T("Admin.Common.ExportToXml.All")</a>
            <input type="button" id="exportxml-selected" class="t-button" value="@T("Admin.Common.ExportToXml.Selected")" />
            <a href="@Url.Action("ExportExcelAll")" class="t-button">@T("Admin.Common.ExportToExcel.All")</a>
            <input type="button" id="exportexcel-selected" class="t-button" value="@T("Admin.Common.ExportToExcel.Selected")" />
            @if (!Model.IsLoggedInAsVendor)
            {
                //a vendor cannot import products
                <input type="button" id="importexcel" name="importexcel" class="t-button" value="@T("Admin.Common.ImportFromExcel")" />
                <input type="button" id="Aero87ImportProductsFromXlsx" name="Aero87ImportProductsFromXlsx" class="t-button" value="Aero - Import Sản Phẩm Từ Excel" />
            }
            
            @if (ViewBag.AllowDeleteProducts)
            { 
                <input type="button" id="delete-selected" class="t-button" value="@T("Admin.Common.Delete.Selected")" />
            }
        </div>
        }
    </div>
    <table width="100%">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.SearchProductName):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => Model.SearchProductName)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.SearchCategoryId):
            </td>
            <td class="adminData">
                @Html.DropDownList("SearchCategoryId", Model.AvailableCategories)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.SearchIncludeSubCategories):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => Model.SearchIncludeSubCategories)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.SearchManufacturerId):
            </td>
            <td class="adminData">
                @Html.DropDownList("SearchManufacturerId", Model.AvailableManufacturers)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.SearchStoreId):
            </td>
            <td class="adminData">
                @Html.DropDownList("SearchStoreId", Model.AvailableStores)
            </td>
        </tr>
        <tr @(Model.IsLoggedInAsVendor ? Html.Raw("style='display: none;'") : null)>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.SearchVendorId):
            </td>
            <td class="adminData">
                @Html.DropDownList("SearchVendorId", Model.AvailableVendors)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.SearchWarehouseId):
            </td>
            <td class="adminData">
                @Html.DropDownList("SearchWarehouseId", Model.AvailableWarehouses)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.SearchProductTypeId):
            </td>
            <td class="adminData">
                @Html.DropDownList("SearchProductTypeId", Model.AvailableProductTypes)
            </td>
        </tr>
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.GoDirectlyToSku):
            </td>
            <td class="adminData">
                @Html.EditorFor(model => Model.GoDirectlyToSku)
                <input type="submit" id="go-to-product-by-sku" name="go-to-product-by-sku" class="t-button" value="@T("Admin.Common.Go")" />
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <input type="button" id="search-products" class="t-button" value="@T("Admin.Common.Search")" />
                @if (ViewBag.AllowPublishProducts)
                {
                    <input type="button" id="publish-products" class="t-button" value="Publish" />
                }
            </td>
        </tr>
    </table>
    <p>
    </p>
    <table class="adminContent">
        <tr>
            <td>
                @(Html.Telerik().Grid<ProductModel>()
                    .Name("products-grid")
                    .Columns(columns =>
                    {
                        columns.Bound(x => x.Id)
                        .Filterable(false)
                        .ClientTemplate("<input type='checkbox' value='<#= Id #>' class='checkboxGroups'/>")
                        .Title("<input id='mastercheckbox' type='checkbox'/>")
                        .Width(50)
                        .HtmlAttributes(new { style = "text-align:center" })
                        .HeaderHtmlAttributes(new { style = "text-align:center" });
                        if (Model.DisplayProductPictures)
                        {
                            columns.Bound(x => x.PictureThumbnailUrl)
                                .ClientTemplate("<img alt='<#= Id #>' src='<#= PictureThumbnailUrl #>' />");
                        }
                        columns.Bound(x => x.Name);
                        columns.Bound(x => x.Sku);
                        columns.Bound(x => x.Price);
                        columns.Bound(x => x.StockQuantity);
                        columns.Bound(x => x.ProductTypeName);
                        columns.Bound(x => x.Published)
                            .ClientTemplate("<img alt='' src='" + Url.Content("~/Administration/Content/images/") + "active-<#= Published #>.gif' />")
                            .Centered()
                            .Width(100);
                        columns.Bound(x => x.Id)
                            .Width(50)
                            .Centered()
                            .Template(x => Html.ActionLink(T("Admin.Common.Edit").Text, "Edit", new { id = x.Id }))
                            .ClientTemplate("<a href=\"Edit/<#= Id #>\">" + T("Admin.Common.Edit").Text + "</a>")
                            .Title(T("Admin.Common.Edit").Text);
                    })
                     .Pageable(settings => settings.PageSize(gridPageSize).Position(GridPagerPosition.Both))
                     .DataBinding(dataBinding => dataBinding.Ajax().Select("ProductList", "Product"))
                     .ClientEvents(events => events.OnDataBinding("onDataBinding").OnDataBound("onDataBound"))
                     .EnableCustomBinding(true))
            </td>
        </tr>
    </table>
    
    <script type="text/javascript">

        var selectedIds = [];

        $(document).ready(function () {

            //search button
            $('#search-products').click(function () {
                //search
                var grid = $('#products-grid').data('tGrid');
                grid.currentPage = 1; //new search. Set page size to 1
                grid.ajaxRequest();
                //clear selected checkboxes
                $('.checkboxGroups').attr('checked', false).change();
                selectedIds = [];
                return false;
            });

            $("#@Html.FieldIdFor(model => model.SearchProductName)").keydown(function (event) {
                if (event.keyCode == 13) {
                    $("#search-products").click();
                    return false;
                }
            });
            $("#@Html.FieldIdFor(model => model.GoDirectlyToSku)").keydown(function (event) {
                if (event.keyCode == 13) {
                    $("#go-to-product-by-sku").click();
                    return false;
                }
            });

            //"Export Excel selected" button
            $('#exportexcel-selected').click(function (e) {
                e.preventDefault();
                //redirect to required URL
                setLocation('@(Url.Action("ExportExcelSelected", "Product"))?selectedIds=' + selectedIds.join(","));
                return false;
            });

            //"Export XML selected" button
            $('#exportxml-selected').click(function (e) {
                e.preventDefault();
                //redirect to required URL
                setLocation('@(Url.Action("ExportXmlSelected", "Product"))?selectedIds=' + selectedIds.join(","));
                return false;
            });

            $('#mastercheckbox').click(function () {
                $('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
            });

            //"Delete (selected)" button
            $('#delete-selected').click(function (e) {
                e.preventDefault();
                //redirect to required URL
                //setLocation('@(Url.Action("DeleteSelected", "Product"))?selectedIds=' + selectedIds.join(","));
                if (selectedIds.length > 0) {
                    $('#product-delete-selected-window').data('tWindow').center().open();
                }
                return false;
            });

            $('#publish-products').click(function (e) {
                e.preventDefault();
                if (selectedIds.length > 0) {
                    $('#product-publish-selected-window').data('tWindow').center().open();
                }
                return false;
            });

            //wire up checkboxes. 
            $('#products-grid').on('change', 'input[type=checkbox][id!=mastercheckbox]', function (e) {
                var $check = $(this);
                if ($check.is(":checked") == true) {
                    var checked = jQuery.inArray($check.val(), selectedIds);
                    if (checked == -1) {
                        //add id to selectedIds.  
                        selectedIds.push($check.val());
                    }
                }
                else {
                    var checked = jQuery.inArray($check.val(), selectedIds);
                    if (checked > -1) {
                        //remove id from selectedIds.  
                        selectedIds = $.grep(selectedIds, function (item, index) {
                            return item != $check.val();
                        });
                    }
                }
                updateMasterCheckbox();
            });            
        });

        function onDataBinding(e) {
            var searchModel = {
                SearchProductName: $('#@Html.FieldIdFor(model => model.SearchProductName)').val(),
                SearchCategoryId: $('#SearchCategoryId').val(),
                SearchIncludeSubCategories: $('#@Html.FieldIdFor(model => model.SearchIncludeSubCategories)').is(':checked'),
                SearchManufacturerId: $('#SearchManufacturerId').val(),
                SearchStoreId: $('#SearchStoreId').val(),
                SearchWarehouseId: $('#SearchWarehouseId').val(),
                SearchVendorId: $('#SearchVendorId').val(),
                SearchProductTypeId: $('#SearchProductTypeId').val()
            };
            e.data = searchModel;
        }

        function onDataBound(e) {
            $('#products-grid input[type=checkbox][id!=mastercheckbox]').each(function () {
                var currentId = $(this).val();
                var checked = jQuery.inArray(currentId, selectedIds);
                //set checked based on if current checkbox's value is in selectedIds.  
                $(this).attr('checked', checked > -1);
            });

            updateMasterCheckbox();
        }

        function updateMasterCheckbox() {
            var numChkBoxes = $('#products-grid input[type=checkbox][id!=mastercheckbox]').length;
            var numChkBoxesChecked = $('#products-grid input[type=checkbox][checked][id!=mastercheckbox]').length;
            $('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
        }

        function closeWindow(windowId) {
            $('#' + windowId).data('tWindow').close();
        }

        function deleteSelectedProducts() {
            $.ajax({
                cache:false,
                type: "POST",
                url: "@(Url.Action("DeleteSelected", "Product"))",
                data: { "selectedIds": selectedIds.join(",") },
                success: function (rtn) {
                    closeWindow('product-delete-selected-window');                    
                    if (rtn.Status == "Redirect") {
                        window.location.href = rtn.Url;
                        return;
                    }
                    
                    //Reload data
                    $("#search-products").click();

                    //Show notification
                    if (rtn.Status == "Success") {
                        $(".content").prepend("<div class='messageBox messageBoxSuccess'>" + rtn.Message + "</div>");
                    }
                    else {
                        $(".content").prepend("<div class='messageBox messageBoxError'>" + rtn.Message + "</div>");
                    }
                    
                    $(".content").on("click", ".messageBox", function () {
                        $(".messageBox").remove();
                    });
                    
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    closeWindow();
                    alert('Delete data failed: ' + thrownError);
                }  
            });
        }

        function publishSelectedProducts() {
            $.ajax({
                cache:false,
                type: "POST",
                url: "@(Url.Action("PublishSelected", "Product"))",
                data: { "selectedIds": selectedIds.join(",") },
                success: function (rtn) {
                    closeWindow('product-publish-selected-window');
                    
                    if (rtn.Status == "Redirect") {
                        window.location.href = rtn.Url;
                        return;
                    }
                    
                    //Reload data
                    $("#search-products").click();

                    //Show notification
                    if (rtn.Status == "Success") {
                        $(".content").prepend("<div class='messageBox messageBoxSuccess'>" + rtn.Message + "</div>");
                    }
                    else {
                        $(".content").prepend("<div class='messageBox messageBoxError'>" + rtn.Message + "</div>");
                    }
                    
                    $(".content").on("click", ".messageBox", function () {
                        $(".messageBox").remove();
                    });
                    
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    closeWindow();
                    alert('Publish product(s) failed: ' + thrownError);
                }  
            });
        }
        
    </script>  
}
@{Html.Telerik().Window()
        .Name("product-delete-selected-window")
        .Title(T("Admin.Common.AreYouSure").Text)
        .Content(@<text>
            <div>
                <p>
                    @T("Admin.Common.DeleteSelectedConfirmation")
                </p>
                <div class="form-actions">
                    <span class="t-button" onclick="closeWindow('product-delete-selected-window');">@T("Admin.Common.NoCancel")</span>
                    <span class="t-button" onclick="deleteSelectedProducts();">@T("Admin.Common.Delete")</span>
                </div>
            </div>
        </text>)
        .Width(300)
        .Scrollable(false)
        .Draggable(true)
        .Modal(true)
        .Visible(false)
        .Render();
}

@{Html.Telerik().Window()
        .Name("product-publish-selected-window")
        .Title(T("Admin.Common.AreYouSure").Text)
        .Content(@<text>
            <div>
                <p>
                    Are you sure you want to publish selected product(s)?
                </p>
                <div class="form-actions">
                    <span class="t-button" onclick="closeWindow('product-publish-selected-window');">@T("Admin.Common.NoCancel")</span>
                    <span class="t-button" onclick="publishSelectedProducts();">Publish</span>
                </div>
            </div>
        </text>)
        .Width(300)
        .Scrollable(false)
        .Draggable(true)
        .Modal(true)
        .Visible(false)
        .Render();
}

@*import products form*@
@{Html.Telerik().Window()
        .Name("importexcel-window")
        .Title(T("Admin.Common.ImportFromExcel").Text)
        .Content(@<text>
    @using (Html.BeginForm("ImportExcel", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        <table style="text-align: left;">
            <tr>
                <td colspan="2">
                    <em>@T("Admin.Catalog.Products.List.ImportFromExcelTip")</em>
                </td>
            </tr>
            <tr>
                <td>
                    @T("Admin.Common.ExcelFile"):
                </td>
                <td>
                    <input type="file" id="importexcelfile" name="importexcelfile" />
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <input type="submit" class="t-button" value="@T("Admin.Common.ImportFromExcel")" />
                </td>
            </tr>
        </table>
    }
    </text>)
        .Width(400)
        .Scrollable(false)
        .Draggable(true)
        .Modal(true)
        .Visible(false)
        .Render();
}

@{Html.Telerik().Window()
        .Name("Aero87ImportProductsFromXlsx-window")
        .Title(T("Admin.Common.ImportFromExcel").Text)
        .Content(@<text>
    @using (Html.BeginForm("Aero87ImportProductsFromXlsx", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        <table style="text-align: left;">
            <tr>
                <td>
                    @T("Admin.Common.ExcelFile"):
                </td>
                <td>
                    <input type="file" id="importexcelfile" name="importexcelfile" />
                </td>
            </tr>
            <tr>
                <td>
                   Edit Product
                </td>
                <td>
                    <input type="checkbox" name="IsEditProduct" checked value="true" />
                </td>
            </tr>
            <tr>
                <td>
                   Edit Invoice
                </td>
                <td>
                    <input type="checkbox" name="IsEditInvoice" checked value="true" />
                </td>
            </tr>
            <tr>
                <td>
                    Publish
                </td>
                <td>
                    <input type="checkbox" name="IsPublished" value="true" />
                </td>
            </tr>
            <tr>
                <td>
                   Cửa hàng
                </td>
                <td>
                    @Html.DropDownList("importedStoreId", Model.Stores)
                </td>
            </tr>

            <tr>
                <td colspan="2">
                    <input type="submit" id="submitImport" class="t-button" value="@T("Admin.Common.ImportFromExcel")" />
                </td>
            </tr>
        </table>
    }
    </text>)
        .Width(400)
        .Draggable(true)
        .Scrollable(false)
        .Modal(true)
        .Visible(false)
        .Render();
}

<script type="text/javascript">
    $(document).ready(function () {

        $("#importexcel").click(function (e) {
            e.preventDefault();
            $('#importexcel-window').data('tWindow').center().open();
        });

        $("#Aero87ImportProductsFromXlsx").click(function (e) {
            e.preventDefault();
            $('#Aero87ImportProductsFromXlsx-window').data('tWindow').center().open();
        });

        $("#submitImport").click(function (e) {
            var isPublished = $('input[name=IsPublished]').is(":checked");
            var importedStoreId = $("#importedStoreId option:selected").val();
            if(isPublished==false && importedStoreId!=-1)
            {
                alert("Please choose correct inventory.");
                e.preventDefault();
            }
        });
    });
</script>
