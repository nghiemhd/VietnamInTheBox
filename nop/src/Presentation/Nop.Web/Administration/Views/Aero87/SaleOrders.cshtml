@using Telerik.Web.Mvc.UI
@using Nop.Admin.Controllers

@{
    var gridPageSize = EngineContext.Current.Resolve<Nop.Core.Domain.Common.AdminAreaSettings>().GridPageSize;
    
    //page title
    ViewBag.Title = "Quản lý đơn hàng";
}

@model Nop.Admin.Models.Aero87.SaleOrderSearch

<div class="section-header">
    <div class="title">
        Danh sách đơn hàng
    </div>
    <div class="options">
        
    </div>
</div>

<table width="100%">
        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.FromDate):
            </td>
            <td class="adminData">
                @Html.Telerik().DatePickerFor(model => Model.FromDate)
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.ToDate):
            </td>
            <td class="adminData">
                @Html.Telerik().DatePickerFor(model => Model.ToDate)
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.StoreId):
            </td>
            <td class="adminData">
                @Html.DropDownList("StoreId", Model.Stores)
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.CarrierId):
            </td>
            <td class="adminData">
                @Html.DropDownList("CarrierId", Model.Carriers)
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.PSStatus):
            </td>
            <td class="adminData">
                @Html.DropDownListForEnum(model => Model.PSStatus,typeof(Nop.Core.Domain.Aero87.PSStatus), new DropDownItem { Text = "---Tất cả---" })
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.SaleChanel):
            </td>
            <td class="adminData">
                @Html.DropDownListForEnum(model => Model.SaleChanel,typeof(Nop.Core.Domain.Aero87.SaleChanel), new DropDownItem { Text = "---Tất cả---" })
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.SourceId):
            </td>
            <td class="adminData">
                @Html.DropDownList("SourceId", Model.SalesSources)
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.ReturnReasonId):
            </td>
            <td class="adminData">
                @Html.DropDownList("ReturnReasonId", Model.ReturnReasons)
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.PaymentType):
            </td>
            <td class="adminData">
                @Html.DropDownListForEnum(model => Model.PaymentType,typeof(Nop.Core.Domain.Aero87.PaymentType), new DropDownItem { Text = "---Tất cả---" })
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.PaymentStatus):
            </td>
            <td class="adminData">
                @Html.DropDownListForEnum(model => Model.PaymentStatus, typeof(Nop.Core.Domain.Aero87.PaymentStatus), new DropDownItem { Text = "---Tất cả---" })
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.OrderNo):
            </td>
            <td class="adminData">
                @Html.TextBoxFor(model => Model.OrderNo)
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.RefNo):
            </td>
            <td class="adminData">
                @Html.TextBoxFor(model => Model.RefNo)
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.ShippingCode):
            </td>
            <td class="adminData">
                @Html.TextBoxFor(model => Model.ShippingCode)
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.CustomerName):
            </td>
            <td class="adminData">
                @Html.TextBoxFor(model => Model.CustomerName)
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.CustomerPhone):
            </td>
            <td class="adminData">
                @Html.TextBoxFor(model => Model.CustomerPhone)
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.ProductCode):
            </td>
            <td class="adminData">
                @Html.TextBoxFor(model => Model.ProductCode)
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Barcode):
            </td>
            <td class="adminData">
                @Html.TextBoxFor(model => Model.Barcode)
            </td>
        </tr>

        <tr>
            <td class="adminTitle">
                @Html.NopLabelFor(model => model.Desc):
            </td>
            <td class="adminData">
                @Html.TextBoxFor(model => Model.Desc)
            </td>
        </tr>

        <tr>
            <td colspan="2">
                <input type="button" id="search-saleorders" class="t-button" value="Tìm" />
            </td>
        </tr>
</table>
<p>
</p>
<table class="adminContent">
    <tr>
        <td>
            @(Html.Telerik().Grid<Nop.Core.Domain.Aero87.SaleOrdersResult>()
                    .Name("saleorders-grid")
                    .DataKeys(keys =>
                    {
                        keys.Add(x => x.Id);
                    })
                    .ToolBar(commands => {
                        if (ViewBag.IsCheckSOPayment)
                        {
                            commands.SubmitChanges();
                        }
                    })
                    .Columns(columns =>
                    {
                        columns.Bound(x => x.Id)
                        .Filterable(false)
                        .ClientTemplate("<input type='checkbox' name='checkedRecords' value='<#= Id #>' class='checkboxGroups'/>")
                        .Title("<input id='mastercheckbox' type='checkbox'/>")
                        .Width(50)
                        .HtmlAttributes(new { style = "text-align:center" })
                        .HeaderHtmlAttributes(new { style = "text-align:center" })
                        .ReadOnly();
                        columns.Bound(x => x.StoreCode).Title("CH").ReadOnly();
                        columns.Bound(x => x.OrderNo).Title("Mã ĐH").ReadOnly();
                        columns.Bound(x => x.SaleChanelName).Title("Kênh").ReadOnly();
                        columns.Bound(x => x.IsMasterCard).ClientTemplate(@"<#=IsMasterCard ? '<input checked disabled type=""checkbox""/>' : '<input disabled type=""checkbox""/>' #>").Title("Thẻ").ReadOnly();
                        columns.Bound(x => x.RefNo).Title("Ref").ReadOnly();
                        columns.Bound(x => x.CarrierCode).Title("NVC").ReadOnly();
                        columns.Bound(x => x.ShippingCode).Title("Mã vận đơn").ReadOnly();
                        if (ViewBag.IsAd)
                        {
                            columns.Bound(x => x.PSStatusName).Title("Tình trạng").ClientTemplate("<input type=button class='t-button' onclick='release(this,<#= Id#>);' value='<#= PSStatusName#>'/>");
                        }
                        else
                        {
                            columns.Bound(x => x.PSStatusName).Title("Tình trạng").ReadOnly();
                        }

                        columns.Bound(x => x.OrderDate).Width(50).Title("Ngày ĐH").ReadOnly();
                        if (ViewBag.IsAd)
                        {
                            if (ViewBag.IsCheckSOPayment)
                            {
                                columns.Bound(x => x.IsPaid).ClientTemplate(@"<#=IsPaid ? '<input checked disabled type=""checkbox""/>' : '<input disabled type=""checkbox""/>' #>").Title("TT");
                                columns.Bound(x => x.PaymentDate).Title("Ngày TT").EditorTemplateName("Date").Format("{0:d}");
                            }
                            else
                            {
                                columns.Bound(x => x.IsPaid).ClientTemplate(@"<#=IsPaid ? '<input checked disabled type=""checkbox""/>' : '<input disabled type=""checkbox""/>' #>").Title("TT").ReadOnly();
                                columns.Bound(x => x.PaymentDate).Title("Ngày TT").EditorTemplateName("Date").Format("{0:d}").ReadOnly();
                            }
                        }
                        columns.Bound(x => x.Discount).Title("CK").Format("{0:N0}").ReadOnly();
                        columns.Bound(x => x.ShippingFee).Title("PVC").Format("{0:N0}").ReadOnly();
                        columns.Bound(x => x.AeroShippingFee).Title("Aero PVC").Format("{0:N0}").ReadOnly();
                        if (ViewBag.IsAd)
                        {
                            columns.Bound(x => x.Amount).Title("TC").Format("{0:N0}").FooterTemplate(
                                                        "<table><caption><strong>Tính tổng:</strong></caption>" +
                                                         "<tr><td>Qty: </td><td align='right'><span id=\"aggregator-SumQty-block\"></span></td></tr>" +
                                                         "<tr><td>Sub: </td><td align='right'><span id=\"aggregator-SumSubTotal-block\"></span></td></tr>" +
                                                         "<tr><td>Discount: </td><td  align='right'><span id=\"aggregator-SumDiscount-block\"></span></td><tr>" +
                                                         "<tr><td>ShipFee: </td><td  align='right'><span id=\"aggregator-SumShippingFee-block\"></span></td><tr>" +
                                                         "<tr><td>Amount: </td><td  align='right'><span id=\"aggregator-SumAmount-block\"></span></td><tr>" +
                                                         "<tr><td>A87PVC: </td><td  align='right'><span id=\"aggregator-SumAeroShippingFee-block\"></span></td><tr>" +
                                                         "<tr><td>APVC: </td><td  align='right'><span id=\"aggregator-SumAmountAfterAPVC-block\"></span></td><tr>" +
                                                         (ViewBag.IsAd ? "<tr><td>Cost: </td><td  align='right'><span id=\"aggregator-SumCostAmount-block\"></span></td><tr>" : "") +
                                                         (ViewBag.IsAd ? "<tr><td>Gross: </td><td  align='right'><span id=\"aggregator-SumGrossAmount-block\"></span></td><tr>" : "") +
                                                         (ViewBag.IsAd ? "<tr><td>GrossTR: </td><td  align='right'><span id=\"aggregator-GrossTR-block\"></span></td><tr>" : "")
                                                         + "</table>"
                            ).ReadOnly();
                        }
                        else
                        {
                            columns.Bound(x => x.Amount).Title("TC").Format("{0:N0}").ReadOnly(); 
                        }

                        columns.Bound(x => x.CustomerName).Title("Tên khách hàng").ReadOnly();
                        columns.Bound(x => x.Mobile).Title("Số ĐT").ReadOnly();
                        columns.Bound(x => x.SalesSource).Title("Nguồn").ReadOnly();
                        columns.Bound(x => x.SalesReturnReason).Title("Lý do đổi/trả").ReadOnly();
                        columns.Bound(x => x.Desc).Title("Diễn giải").ReadOnly();
                        columns.Bound(x => x.CreatedUser).Title("NT").ReadOnly();
                        if (ViewBag.IsAd)
                        {
                            columns.Bound(x => x.PrintCount).Title("_").ReadOnly();
                        }                       
                    })
                    .DetailView(m => m.ClientTemplate(
                        Html.Telerik().Grid<Nop.Core.Domain.Aero87.SaleOrderDetailLinesResult>()
                        .Name("orderdetail-grid<#= Id #>")
                        .Columns(columns =>
                            {
                                columns.Bound(si => si.PictureUrl).ClientTemplate("<img alt='<#= Id #>' src='<#= PictureUrl #>' />");
                                columns.Bound(si => si.Name).Title("Tên sản phẩm");
                                columns.Bound(si => si.Barcode).Title("Mã vạch");
                                columns.Bound(si => si.SellUnitPrice).Title("Giá bán").Format("{0:N0}");
                                columns.Bound(si => si.Qty).Title("Số lượng");
                                columns.Bound(si => si.LineDiscount).Title("% Chiết khấu");
                                columns.Bound(si => si.LineAmount).Title("Tổng tiền").Format("{0:N0}");
                                if (ViewBag.IsAd)
                                {
                                    columns.Bound(si => si.CostPrice).Title("Giá vốn").Format("{0:N0}");
                                    columns.Bound(si => si.CostAmount).Title("Tổng giá vốn").Format("{0:N0}");
                                }
                                columns.Bound(si => si.AttributeDesc).Title("Thuộc tính");
                            })
                        .DataBinding(dataBinding => dataBinding.Ajax()
                                 .Select("SaleOrderGridDetail", "Aero87", new
                                 {
                                     id = "<#= Id #>"
                                 }))
                        .ToHtmlString()
                        )
                     )
                     .Pageable(settings => settings.PageSize(gridPageSize).Position(GridPagerPosition.Both))
                     .DataBinding(dataBinding => {
                         dataBinding.Ajax()
                             .Select("SaleOrdersList", "Aero87")
                             .Update("SaleOrderGridUpdate", "Aero87");
                     })
                     .ClientEvents(events => events.OnDataBinding("onDataBinding").OnDataBound("onDataBound").OnComplete("onComplete"))
                     .EnableCustomBinding(true)
                     .Editable(editing => editing.Mode(GridEditMode.InCell)))
        </td>
    </tr>
</table>

@{Html.Telerik().Window()
        .Name("approve-window")
        .Title("Duyệt Hóa Đơn Bán Hàng")
        .Content(@<text>
    @using (Html.BeginForm("ApproveSaleOrder", "Aero87", FormMethod.Post, new { enctype = "multipart/form-data"}))
    {
        @Html.Hidden("OrderId")
        <table style="text-align: left;">
            <tr>
                <td>
                    Tài khoản ghi nợ:
                </td>
                <td>
                    @(Html.Telerik().ComboBox()
                        .Name("DebitAcctId")
                        .Filterable(m => m.FilterMode(AutoCompleteFilterMode.StartsWith))
                        .DropDownHtmlAttributes( new { style = "width:200px; white-space:nowrap;" })
                        .HtmlAttributes( new { style = "width:200px; white-space:nowrap;" })
                        .AutoFill(true)
                        .DataBinding(m => m.Ajax().Cache(true).Select("AcctAjax","Aero87")))
                </td>
            </tr>
            
            <tr>
                <td>
                   Đối tượng công nợ (nếu đòi hỏi):
                </td>
                <td>
                    @(Html.Telerik().ComboBox()
                        .Name("ObjId")
                        .Filterable(m => m.FilterMode(AutoCompleteFilterMode.StartsWith))
                        .DropDownHtmlAttributes( new { style = "width:200px; white-space:nowrap;" })
                        .HtmlAttributes( new { style = "width:200px; white-space:nowrap;" })
                        .AutoFill(true)
                        .DataBinding(m => m.Ajax().Cache(true).Select("ObjAjax","Aero87")))
                </td>
            </tr>

            <tr>
                <td>
                   Tài khoản chi phí (nếu có):
                </td>
                <td>
                    @(Html.Telerik().ComboBox()
                        .Name("FeeAcctId")
                        .Filterable(m => m.FilterMode(AutoCompleteFilterMode.StartsWith))
                        .DropDownHtmlAttributes( new { style = "width:200px; white-space:nowrap;" })
                        .HtmlAttributes( new { style = "width:200px; white-space:nowrap;" })
                        .AutoFill(true)
                        .DataBinding(m => m.Ajax().Cache(true).Select("AcctAjax","Aero87")))
                </td>
            </tr>
            
            <tr>
                <td>
                   Số tiền phí:
                </td>
                <td>
                    @Html.Telerik().NumericTextBox().Name("FeeAmount");
                </td>
            </tr>

            <tr>
                <td>
                   Diễn giải:
                </td>
                <td>
                    @Html.TextArea("Desc")
                </td>
            </tr>

            <tr>
                <td colspan="2">
                    <input type="submit" class="t-button" value="Duyệt" />
                </td>
            </tr>
        </table>
    }
    </text>)
        .Width(400)
        .Height(245)
        .Draggable(true)
        .Modal(true)
        .Visible(false)
        .Render();
}


<script type="text/javascript">

    function release(obj,orderid)
    {

        if(obj.value == 'Đã duyệt')
        {
            $.post('@Url.Action("UnPostSaleOrder", "Aero87")' + '/' + orderid, function (rp) {
                if (!rp.IsOke) alert(rp);
                $('#search-saleorders').trigger('click');
            });
            return false;
        }


        $('#approve-window').find('#OrderId').val(orderid);
        $('#approve-window').data('tWindow').center().open();
    }

    var selectedIds = [];


    $(document).ready(function () {
        $('#approve-window').find('form').submit(function () {
            var data = $(this).serializeArray();
            $.post('@Url.Action("ApproveSaleOrder", "Aero87")', data, function (rp) {
                if (!rp.IsOke) alert(rp);
                $('#approve-window').data('tWindow').close();
                $('#search-saleorders').trigger('click');
            });
            return false;
        });


        //search button
        $('#search-saleorders').click(function () {
            //search
            var grid = $('#saleorders-grid').data('tGrid');
            grid.currentPage = 1; //new search. Set page size to 1
            grid.ajaxRequest();
            //clear selected checkboxes
            $('.checkboxGroups').attr('checked', false).change();
            selectedIds = [];
            return false;
        });

           

        $('#mastercheckbox').click(function () {
            $('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
        });

        //wire up checkboxes. 
        $('#saleorders-grid').on('change', 'input[type=checkbox][id!=mastercheckbox]', function (e) {
            var $check = $(this);
            if ($check.is(":checked") == true) {
                var checked = jQuery.inArray($check.val(), selectedIds);
                if (checked == -1) {
                    //add id to selectedIds.  
                    selectedIds.push($check.val());
                }
            }
            else {
                var checked = jQuery.inArray($check.val(), selectedIds);
                if (checked > -1) {
                    //remove id from selectedIds.  
                    selectedIds = $.grep(selectedIds, function (item, index) {
                        return item != $check.val();
                    });
                }
            }
            updateMasterCheckbox();
        });

    });

    function onDataBinding(e) {
        var searchModel = {
            FromDate: $('#@Html.FieldIdFor(model => model.FromDate)').val(),
            ToDate: $('#@Html.FieldIdFor(model => model.ToDate)').val(),
            StoreId: $('#@Html.FieldIdFor(model => model.StoreId)').val(),
            CarrierId: $('#@Html.FieldIdFor(model => model.CarrierId)').val(),
            PSStatus: $('#@Html.FieldIdFor(model => model.PSStatus)').val(),
            OrderNo: $('#@Html.FieldIdFor(model => model.OrderNo)').val(),
            CustomerName: $('#@Html.FieldIdFor(model => model.CustomerName)').val(),
            CustomerPhone: $('#@Html.FieldIdFor(model => model.CustomerPhone)').val(),
            ProductCode: $('#@Html.FieldIdFor(model => model.ProductCode)').val(),
            Desc: $('#@Html.FieldIdFor(model => model.Desc)').val(),
            Barcode: $('#@Html.FieldIdFor(model => model.Barcode)').val(),
            RefNo: $('#@Html.FieldIdFor(model => model.RefNo)').val(),
            SaleChanel: $('#@Html.FieldIdFor(model => model.SaleChanel)').val(),
            SourceId: $('#@Html.FieldIdFor(model => model.SourceId)').val(),
            ReturnReasonId: $('#@Html.FieldIdFor(model => model.ReturnReasonId)').val(),
            ShippingCode: $('#@Html.FieldIdFor(model => model.ShippingCode)').val(),
            PaymentType: $('#@Html.FieldIdFor(model => model.PaymentType)').val(),
            PaymentStatus: $('#@Html.FieldIdFor(model => model.PaymentStatus)').val()
        };
        e.data = searchModel;
    }

    var aggs = null;

    function onDataBound(e) {
        $('#saleorders-grid input[type=checkbox][id!=mastercheckbox].checkboxGroups').each(function () {
            var currentId = $(this).val();
            var checked = jQuery.inArray(currentId, selectedIds);
            //set checked based on if current checkbox's value is in selectedIds.  
            $(this).attr('checked', checked > -1);
        });

        updateMasterCheckbox();

        @if(ViewBag.IsAd)
        {
            <text>
            //Update Agg
            for (var key in aggs) {
                $('#aggregator-SumSubTotal-block').text(aggs['SumSubTotal']);
                $('#aggregator-SumDiscount-block').text(aggs['SumDiscount']);
                $('#aggregator-SumShippingFee-block').text(aggs['SumShippingFee']);
                $('#aggregator-SumAeroShippingFee-block').text(aggs['SumAeroShippingFee']);
                $('#aggregator-SumAmount-block').text(aggs['SumAmount']);
                $('#aggregator-SumAmountAfterAPVC-block').text(aggs['SumAmountAfterAPVC']);
                $('#aggregator-SumQty-block').text(aggs['SumQty']);
                @if(ViewBag.IsAd)
                {
                    <text>
                    $('#aggregator-SumCostAmount-block').text(aggs['SumCostAmount']);
                    $('#aggregator-SumGrossAmount-block').text(aggs['SumGrossAmount']);
                    $('#aggregator-GrossTR-block').text(aggs['GrossTR']);
                    </text>
                }
            }
            </text>
        }

        //$('#saleorders-grid input[value="Đã duyệt"]').prop('disabled', true);
    }

    function onComplete(e) {
        if (e.name == "submitChanges")
        {
            $('#search-saleorders').click();
        }

        var result = e.response;
        if (result) {
            aggs = e.response["aggregates"];
        }
    }

    function updateMasterCheckbox() {
        var numChkBoxes = $('#saleorders-grid input[type=checkbox][id!=mastercheckbox]').length;
        var numChkBoxesChecked = $('#saleorders-grid input[type=checkbox][checked][id!=mastercheckbox]').length;
        $('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
    }
</script>  